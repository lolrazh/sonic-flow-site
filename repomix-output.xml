This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.eslintrc.cjs
.gitignore
components.json
next.config.js
package.json
postcss.config.js
prettier.config.js
src/app/layout.tsx
src/app/page.tsx
src/components/index.ts
src/components/layout/Footer.tsx
src/components/layout/Header.tsx
src/components/layout/index.ts
src/components/layout/MouseAwareGradient.tsx
src/components/sections/FAQ.tsx
src/components/sections/Features.tsx
src/components/sections/Hero.tsx
src/components/sections/HowItWorks.tsx
src/components/sections/index.ts
src/components/sections/Pricing.tsx
src/lib/utils.ts
src/styles/globals.css
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "~/components",
    "utils": "~/lib/utils",
    "ui": "~/components/ui",
    "lib": "~/lib",
    "hooks": "~/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
  },
};
</file>

<file path="prettier.config.js">
/** @type {import('prettier').Config & import('prettier-plugin-tailwindcss').PluginOptions} */
export default {
  plugins: ["prettier-plugin-tailwindcss"],
};
</file>

<file path="src/components/layout/index.ts">
export { default as Header } from './Header';
export { default as Footer } from './Footer';
</file>

<file path="src/components/layout/MouseAwareGradient.tsx">
"use client";

import React, { useEffect, useState } from 'react';

const MouseAwareGradient: React.FC = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  useEffect(() => {
    document.documentElement.style.setProperty('--mouse-x', `${mousePosition.x}px`);
    document.documentElement.style.setProperty('--mouse-y', `${mousePosition.y}px`);
  }, [mousePosition]);

  return null; // This component only handles side effects
};

export default MouseAwareGradient;
</file>

<file path="src/components/sections/index.ts">
export { default as Hero } from './Hero';
export { default as Features } from './Features';
export { default as HowItWorks } from './HowItWorks';
export { default as Pricing } from './Pricing';
export { default as FAQ } from './FAQ';
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "es2022",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,

    /* Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /* Bundled projects */
    "lib": ["dom", "dom.iterable", "ES2022"],
    "noEmit": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "jsx": "preserve",
    "plugins": [{ "name": "next" }],
    "incremental": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    ".eslintrc.cjs",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.cjs",
    "**/*.js",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
</file>

<file path=".eslintrc.cjs">
/** @type {import("eslint").Linter.Config} */
module.exports = {
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": true
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports"
      }
    ]
  }
};
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# database
/prisma/db.sqlite
/prisma/db.sqlite-journal
db.sqlite

# next.js
/.next/
/out/
next-env.d.ts

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
.env
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo

# idea files
.idea

# local files
pill.png
architecture.md 
implementation.md
improvements.md
bars.png
pill.png

# cursor files
.cursor
</file>

<file path="src/components/layout/Header.tsx">
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X } from 'lucide-react';

/**
 * Header component - main navigation for the landing page
 */
export default function Header() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const navItems = [
    { name: 'flow', href: '#for-vibe-coders' },
    { name: 'pricing', href: '#pricing' },
    { name: 'faq', href: '#faq' },
  ];

  // Smooth scroll function
  const handleScrollToSection = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();
    
    const targetId = href.replace('#', '');
    const element = document.getElementById(targetId);
    
    if (element) {
      // Close mobile menu if open
      if (mobileMenuOpen) {
        setMobileMenuOpen(false);
      }
      
      const offset = 64; // Adjusted offset for thinner header
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - offset;
      
      window.scrollTo({
        behavior: 'smooth',
        top: offsetPosition
      });
      
      // Update URL without page reload
      window.history.pushState({}, '', href);
    }
  };

  return (
    <header 
      className={`fixed left-0 top-0 z-50 w-full transition-all duration-300 ease-in-out ${isScrolled ? 'bg-[rgba(12,12,12,0.8)] backdrop-blur-md shadow-lg' : 'bg-transparent'}`}
    >
      <nav className="container mx-auto flex items-center justify-between px-32 py-4 max-w-full">
        {/* Logo */}
        <Link href="/" className="font-lexend text-2xl lowercase tracking-tight text-white/90">
          sonic<span className="text-white/40">flow</span>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden items-center space-x-12 md:flex">
          {/* Main Navigation */}
          <div className="flex space-x-10">
            {navItems.map((item) => (
              <a
                key={item.name}
                href={item.href}
                onClick={(e) => handleScrollToSection(e, item.href)}
                className="font-lexend text-lg text-white/60 transition-colors hover:text-white/90"
              >
                {item.name}
              </a>
            ))}
          </div>

          {/* Auth Buttons */}
          {/* Removed sign in and download buttons */}
        </div>

        {/* Mobile menu button */}
        <button
          onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          className="inline-flex items-center justify-center rounded-md p-2 text-white/40 hover:text-white/90 focus:outline-none md:hidden"
        >
          <span className="sr-only">Open main menu</span>
          {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
        </button>
      </nav>

      {/* Separator */}
      <div 
        className="h-px bg-white/5"
      />

      {/* Mobile menu */}
      <AnimatePresence>
        {mobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden bg-[rgb(12,12,12)] px-8 pb-6 pt-2 md:hidden"
          >
            <div className="container mx-auto">
              <ul className="flex flex-col space-y-4">
                {navItems.map((item) => (
                  <li key={item.name}>
                    <a 
                      href={item.href}
                      onClick={(e) => handleScrollToSection(e, item.href)}
                      className="block py-2 font-lexend text-lg text-white/60 transition-colors hover:text-white/90"
                    >
                      {item.name}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </header>
  );
}
</file>

<file path="src/components/index.ts">
// Layout components
export * from './layout';

// Section components  
export * from './sections';
</file>

<file path="src/components/sections/FAQ.tsx">
"use client";

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown } from 'lucide-react';

interface FAQItem {
  question: string;
  answer: string;
}

interface FAQProps {
  title?: string;
  subtitle?: string;
  items?: FAQItem[];
}

/**
 * FAQ component - displays frequently asked questions with expandable answers
 */
export default function FAQ({
  title = "questions.",
  subtitle = "because you're probably wondering.",
  items = [
    {
      question: "why not just type my prompts or code?",
      answer: "typing is slow, breaks your flow, and pulls you out of the zone. with vibe coding, you speak your intent, stay in the creative groove, and let ai handle the rest."
    },
    {
      question: "how accurate is it?",
      answer: "sonic flow uses state-of-the-art local transcription, tuned for coding and natural language. for those 5–45 second bursts, it's impressively accurate, even with technical terms. and since it's local, it's fast and private."
    },
    {
      question: "will it work with my editor/ide/browser?",
      answer: "yes! if you can type in it, you can use sonic flow in it. vs code, cursor, notion, your terminal. anywhere you type, sonic flow fits right in."
    },
    {
      question: "is my data secure?",
      answer: "100% local processing. nothing is ever sent to the cloud. your words remain yours, always."
    },
    {
      question: 'what is "vibe coding" anyway?',
      answer: "vibe coding is the new way to build software: you describe what you want, ai (or your tools) handle the syntax. it's about staying in flow, riffing on ideas, and letting the machine do the heavy lifting. coined by karpathy, it's how the best devs are working now."
    }
  ]
}: FAQProps = {}) {
  // Default open state - first FAQ is initially open
  const [openFAQs, setOpenFAQs] = useState<number[]>([0]);

  const toggleFAQ = (index: number) => {
    // If this is the only open FAQ and we're trying to close it, don't allow
    if (openFAQs.length === 1 && openFAQs.includes(index)) {
      // Find the next FAQ to open (or previous if at the end)
      const nextIndex = index === items.length - 1 ? 0 : index + 1;
      setOpenFAQs([nextIndex]);
    } 
    // If this FAQ is already open, close it only if there's at least one other open
    else if (openFAQs.includes(index)) {
      if (openFAQs.length > 1) {
        setOpenFAQs(openFAQs.filter(i => i !== index));
      }
    } 
    // Otherwise, add this FAQ to the open list
    else {
      setOpenFAQs([...openFAQs, index]);
    }
  };

  return (
    <section className="relative overflow-hidden section-separator" id="faq">
      <div className="container mx-auto px-8 py-20 md:py-28 max-w-7xl">
        <div className="flex flex-col items-center">
          {/* Header */}
          <div className="max-w-xl text-center mb-16">
            <h2 className="mb-6 font-serif text-4xl lowercase tracking-tight heading-gradient md:text-5xl lg:text-6xl">
              {title}
            </h2>
            <p className="font-lexend text-lg text-subtle">
              {subtitle}
            </p>
          </div>
        
          <div className="w-full max-w-2xl">
            <div className="space-y-4">
              {items.map((faq, index) => (
                <div 
                  key={index} 
                  className="overflow-hidden rounded-2xl card-elevated"
                >
                  <button
                    onClick={() => toggleFAQ(index)}
                    className="flex w-full items-center justify-between p-6 text-left transition-all duration-300 hover:bg-white/[0.02]"
                  >
                    <h3 className="font-lexend text-lg text-white/90 font-medium">{faq.question}</h3>
                    <motion.div
                      animate={{ rotate: openFAQs.includes(index) ? 180 : 0 }}
                      transition={{ duration: 0.3, ease: [0.25, 0.8, 0.25, 1] }}
                      className="ml-4 flex-shrink-0"
                    >
                      <ChevronDown className="h-5 w-5 text-dimmed" />
                    </motion.div>
                  </button>
                  
                  <AnimatePresence>
                    {openFAQs.includes(index) && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: 'auto', opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.3, ease: [0.25, 0.8, 0.25, 1] }}
                      >
                        <div className="px-6 py-4 border-t border-white/5 bg-gradient-to-b from-transparent to-black/10">
                          <p className="font-lexend text-subtle leading-relaxed">{faq.answer}</p>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/Features.tsx">
import React from 'react';
import Image from 'next/image';

export default function Features() {
  return (
    <section className="relative overflow-hidden section-separator" id="for-vibe-coders">
      <div className="container mx-auto px-4 py-20 md:py-28 max-w-7xl">
        <div className="flex flex-col items-center gap-16 lg:flex-row lg:items-center lg:justify-between">
          {/* Left Content */}
          <div className="max-w-xl">
            <h2 className="mb-6 font-serif text-4xl lowercase tracking-tight heading-gradient md:text-5xl lg:text-6xl">
              stop typing.<br />
              start flowing.
            </h2>
            <p className="font-lexend text-lg leading-relaxed text-subtle">
              you&apos;re in the zone. ideas are firing. logic is connecting.<br />
              then comes the typing. clack. clack. delete. clack.<br />
              <span className="font-medium text-white/80 italic">flow shattered.</span>
              <br /><br />
              vibe coding is about staying in that creative torrent, letting your thoughts materialize without the friction of the keyboard. it&apos;s about coding at the speed of thought.
            </p>
          </div>

          {/* Right Content - Rick Rubin Image */}
          <div className="relative aspect-[4/3] w-full max-w-xl overflow-hidden rounded-3xl lg:w-1/2 card-elevated">
            {/* Enhanced gradient overlay */}
            <div className="absolute inset-0 bg-gradient-to-tr from-orange-500/8 via-transparent to-orange-400/5 mix-blend-overlay" />
            
            <Image
              src="/rick-rubin.jpg"
              alt="Rick Rubin - The Original Vibe Coder"
              fill
              className="object-cover transition-transform duration-700 hover:scale-105"
            />

            {/* Enhanced vignette effect */}
            <div className="absolute inset-0 rounded-3xl bg-gradient-to-t from-black/40 via-transparent to-black/10" />
            
            {/* Subtle inner glow */}
            <div className="absolute inset-0 rounded-3xl bg-gradient-to-br from-transparent via-transparent to-orange-500/5" />
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="next.config.js">
/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially useful
 * for Docker builds.
 */

/** @type {import("next").NextConfig} */
const config = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'lh3.googleusercontent.com',
        pathname: '/a/**',
      },
    ],
  },
};

export default config;
</file>

<file path="src/components/layout/Footer.tsx">
"use client";

import React from 'react';

/**
 * Footer component for the landing page
 */
export default function Footer() {
  const currentYear = new Date().getFullYear();
  
  return (
    <footer className="relative overflow-hidden section-separator">
      <div className="container mx-auto px-8 py-12 max-w-7xl">
        <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-8">
          <div className="flex items-center mb-8 md:mb-0">
            <h3 className="font-lexend text-2xl lowercase tracking-tight text-white/90">sonic<span className="text-dimmed">flow</span></h3>
          </div>
          
          <div className="flex flex-wrap justify-start md:justify-end gap-8">
            <a href="/terms" target="_blank" rel="noopener noreferrer" className="font-lexend text-sm text-dimmed transition-all duration-200 hover:text-white/90 hover:transform hover:-translate-y-0.5">
              terms
            </a>
            <a href="/privacy" target="_blank" rel="noopener noreferrer" className="font-lexend text-sm text-dimmed transition-all duration-200 hover:text-white/90 hover:transform hover:-translate-y-0.5">
              privacy
            </a>
            <a href="/cookies" target="_blank" rel="noopener noreferrer" className="font-lexend text-sm text-dimmed transition-all duration-200 hover:text-white/90 hover:transform hover:-translate-y-0.5">
              cookies
            </a>
          </div>
        </div>
        
        <div className="flex flex-col items-center justify-between pt-8 md:flex-row border-t border-white/10">
          <span className="font-lexend text-sm text-dimmed mb-6 md:mb-0">
            © {currentYear} sonic flow. all rights reserved.
          </span>
          
          <div className="flex space-x-6">
            <a href="mailto:hello@sonicflow.ai" className="text-dimmed hover:text-white/90 transition-all duration-200 hover:transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
            </a>
            <a href="#" className="text-dimmed hover:text-white/90 transition-all duration-200 hover:transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z" />
              </svg>
            </a>
            <a href="#" className="text-dimmed hover:text-white/90 transition-all duration-200 hover:transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/sections/Hero.tsx">
"use client";

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';

interface CTAProps {
  text: string;
  href: string;
}

interface HeroProps {
  headline?: string;
  subheadline?: string;
  primaryCta?: CTAProps;
  secondaryCta?: CTAProps;
}

/**
 * Hero section component for the landing page
 */
export default function Hero({
  headline = "this could be you but you're still typing",
  subheadline = "sonic flow is a lightweight, lightning-fast, fully local dictation app built for vibe coders. hit a hotkey, speak your mind, hit it again. done.",
  primaryCta = { text: "try for free", href: "#pricing" },
  secondaryCta = { text: "explore features", href: "#for-vibe-coders" }
}: HeroProps = {}) {
  // Smooth scroll function
  const handleScrollToSection = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();
    
    const targetId = href.replace('#', '');
    const element = document.getElementById(targetId);
    
    if (element) {
      window.scrollTo({
        behavior: 'smooth',
        top: element.offsetTop - 100 // Offset for header height
      });
      
      // Update URL without page reload
      window.history.pushState({}, '', href);
    }
  };

  // Split headline for styling (first part normal, second part with line break)
  const headlineParts = headline?.split('.') ?? [];
  const firstPart = headlineParts[0] ?? '';
  const hasTwoParts = headlineParts.length > 1 && headlineParts[1]?.trim() !== '';
  const secondPart = hasTwoParts ? headlineParts[1]?.trim() : '';
  
  // Safe default values to prevent undefined errors
  const primaryCtaText = primaryCta?.text ?? "Get Started";
  const primaryCtaHref = primaryCta?.href ?? "#pricing";
  const secondaryCtaText = secondaryCta?.text ?? "Explore Features";
  const secondaryCtaHref = secondaryCta?.href ?? "#features";

  return (
    <section className="relative min-h-screen overflow-hidden">
      {/* Background Image */}
      <div className="absolute inset-0 z-0">
        <Image
          src="/hero-bg.jpg"
          alt="Hero background"
          fill
          className="object-cover object-left"
          priority
        />
        {/* Simple dark overlay */}
        <div className="absolute inset-0 bg-black/40" />
      </div>

      <div className="relative z-10 flex min-h-screen w-full items-center">
        <div className="w-full">
          <div className="mx-auto flex w-full max-w-[90rem] justify-center px-8 lg:justify-end">
            <div className="w-full max-w-3xl lg:-mr-12 xl:-mr-24 2xl:-mr-48">
              <h1 className="mb-8 font-serif text-4xl font-normal lowercase leading-tight tracking-normal heading-gradient sm:text-5xl md:text-6xl lg:text-7xl">
                {firstPart}
                {hasTwoParts && (
                  <>
                    <span className="text-accent-600">.</span> 
                    <br />
                    {secondPart}
                  </>
                )}
              </h1>
              <p className="mb-12 w-full max-w-[90%] font-lexend text-base text-subtle sm:max-w-[75%] sm:text-lg md:text-xl">
                {subheadline}
              </p>
              <div className="flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0">
                <a 
                  href={primaryCtaHref}
                  onClick={(e) => handleScrollToSection(e, primaryCtaHref)}
                  className="btn-primary rounded-full px-6 py-3 text-center font-lexend text-sm font-medium sm:px-8 sm:py-4 sm:text-base"
                >
                  {primaryCtaText}
                </a>
                <a 
                  href={secondaryCtaHref} 
                  onClick={(e) => handleScrollToSection(e, secondaryCtaHref)}
                  className="btn-secondary rounded-full px-6 py-3 text-center font-lexend text-sm font-medium sm:px-8 sm:py-4 sm:text-base"
                >
                  {secondaryCtaText}
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/HowItWorks.tsx">
"use client";

import React, { useState } from 'react';

interface PillProps {
  isListening: boolean;
  isProcessing: boolean;
  onStartDictation: () => void;
  onStopDictation: () => void;
}

const DemoPill: React.FC<PillProps> = ({ 
  isListening, 
  isProcessing, 
  onStartDictation, 
  onStopDictation 
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const VISUALIZATION_COUNT = 7;
  
  // Generate frequency bars for the waveform (active state)
  const renderFrequencyBars = () => {
    return Array.from({ length: VISUALIZATION_COUNT }).map((_, index) => (
      <div 
        key={`bar-${index}`} 
        className="waveform-bar"
        style={{ animationDelay: `${index * 0.15}s` }}
      />
    ));
  };

  // Unified function to render dots with different styles
  const renderDots = (type: 'static' | 'animated' | 'collapsed') => {
    return Array.from({ length: VISUALIZATION_COUNT }).map((_, index) => (
      <div 
        key={`dot-${type}-${index}`} 
        className={`dot ${type}`}
        style={type === 'animated' ? { 
          animationDelay: `${index * 0.15}s`
        } : undefined}
      />
    ));
  };
  
  // Determine if the pill should be in the expanded state
  const isExpanded = isHovered || isListening || isProcessing;
  
  return (
    <div 
      className={`
        pill-container
        ${!isExpanded ? 'collapsed' : ''}
        ${isListening ? 'listening' : ''}
        ${isProcessing ? 'processing' : ''}
      `}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={isListening ? onStopDictation : onStartDictation}
    >
      <div className="pill-content">
        <div className="visualization-container">
          {!isExpanded && renderDots('collapsed')}
          {isHovered && !isListening && !isProcessing && renderDots('static')}
          {isListening && renderFrequencyBars()}
          {isProcessing && !isListening && renderDots('animated')}
        </div>
      </div>
    </div>
  );
};

/**
 * HowItWorks component - displays the How It Works section
 */
export default function HowItWorks() {
  const [isListening, setIsListening] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleStartDictation = () => {
    setIsListening(true);
  };

  const handleStopDictation = () => {
    setIsListening(false);
    setIsProcessing(true);
    // Simulate processing time
    setTimeout(() => {
      setIsProcessing(false);
    }, 2000);
  };

  return (
    <section className="relative overflow-hidden section-separator">
      <div className="container mx-auto px-8 py-20 md:py-28 max-w-7xl">
        <div className="flex flex-col items-center gap-24 lg:flex-row-reverse lg:items-center lg:justify-between">
          {/* Left Content - Now on the right */}
          <div className="max-w-xl">
            <h2 className="mb-6 font-serif text-4xl lowercase tracking-tight heading-gradient md:text-5xl lg:text-6xl">
            dead simple.<br />
              <span className="text-dimmed">blazing fast.</span>
            </h2>
            <p className="font-lexend text-lg leading-relaxed text-subtle">
              1. press hotkey to start<br />
              2. speak your code, prompt, or brilliant idea<br />
              3. press hotkey to stop<br />
              4. watch it print. instantly.<br /><br />
              fully local processing means total privacy, fast processing and no internet required. your words stay yours.
            </p>
          </div>

          {/* Right Content - Now on the left - Windows Terminal Demo */}
          <div className="relative aspect-[4/3] w-full max-w-xl overflow-hidden rounded-xl lg:w-1/2 card-floating">
            {/* Windows Terminal-like interface */}
            <div className="absolute inset-0 flex flex-col terminal-screen-frosted rounded-lg overflow-hidden">
              {/* Terminal Title Bar */}
              <div className="flex items-center justify-between px-4 py-2 bg-neutral-800/90 border-b border-white/10">
                <div className="flex items-center gap-2">
                  <svg className="w-4 h-4 text-white/60" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6 9L12 15L18 9" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  <span className="text-sm text-white/80 font-medium">Windows PowerShell</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-3 h-3 rounded-sm bg-white/10 hover:bg-white/20 transition-colors"></div>
                  <div className="w-3 h-3 rounded-sm bg-white/10 hover:bg-white/20 transition-colors"></div>
                  <div className="w-3 h-3 rounded-sm bg-red-500/60 hover:bg-red-500/80 transition-colors"></div>
                </div>
              </div>
              
              {/* Terminal Content */}
              <div className="flex-1 p-4 font-mono text-sm text-white/70">
                <p className="mb-2">PS C:\Users\user&gt; sonic-flow --start</p>
                <p className="text-green-400/90 mb-4 flex items-center gap-2">
                  <span className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
                  Sonic Flow is running...
                </p>
              </div>

              {/* Pill at the bottom */}
              <div className="absolute inset-x-0 bottom-4 flex justify-center">
                <DemoPill 
                  isListening={isListening}
                  isProcessing={isProcessing}
                  onStartDictation={handleStartDictation}
                  onStopDictation={handleStopDictation}
                />
              </div>
            </div>
            
            {/* Terminal glow effect */}
            <div className="absolute inset-0 rounded-xl bg-gradient-to-t from-blue-500/5 via-transparent to-transparent pointer-events-none" />
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/components/sections/Pricing.tsx">
"use client";

import React from 'react';

export default function Pricing() {
  return (
    <section className="relative overflow-hidden section-separator" id="pricing">
      <div className="container mx-auto max-w-7xl px-4 py-20 sm:px-6 lg:px-8 md:py-28">
        <div className="text-center">
          <h2 className="font-serif text-5xl lowercase tracking-tight heading-gradient sm:text-6xl">
            simple, transparent pricing
          </h2>
          <p className="mx-auto mt-3 max-w-4xl font-lexend text-lg text-dimmed">
            start with a 7-day free trial. cancel anytime.
          </p>
        </div>

        <div className="mx-auto mt-16 max-w-sm">
          <div className="overflow-hidden rounded-2xl card-floating">
            <div className="p-8">
              <div className="text-center mb-2">
                <h3 className="font-lexend text-lg lowercase tracking-tight text-subtle">
                  flow
                </h3>
              </div>
              
              <div className="text-center mb-8">
                <div className="font-lexend text-6xl tracking-tight heading-gradient">
                  $9
                  <span className="ml-1 text-xl text-dimmed">/month</span>
                </div>
              </div>
              
              <ul className="space-y-3 mb-8">
                <li className="flex items-start">
                  <span className="text-white/70 mr-3 text-sm leading-6 font-medium">—</span>
                  <span className="font-lexend text-subtle">unlimited dictation</span>
                </li>
                <li className="flex items-start">
                  <span className="text-white/70 mr-3 text-sm leading-6 font-medium">—</span>
                  <span className="font-lexend text-subtle">works in all your apps</span>
                </li>
                <li className="flex items-start">
                  <span className="text-white/70 mr-3 text-sm leading-6 font-medium">—</span>
                  <span className="font-lexend text-subtle">fully local & private</span>
                </li>
                <li className="flex items-start">
                  <span className="text-white/70 mr-3 text-sm leading-6 font-medium">—</span>
                  <span className="font-lexend text-subtle">priority support for beta users</span>
                </li>
              </ul>

              <div className="space-y-2">
                <button className="w-full rounded-full btn-primary px-4 py-3 font-lexend text-sm font-medium">
                  start your 7-day free trial
                </button>
                <p className="text-center text-xs text-dimmed">
                  no credit card required
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="tailwind.config.ts">
import { type Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

export default {
    darkMode: ["class"],
    content: ["./src/**/*.tsx"],
  theme: {
  	extend: {
  		fontFamily: {
  			sans: [
  				'var(--font-lexend)',
                    ...fontFamily.sans
                ],
            serif: ['var(--font-dm-serif)', ...fontFamily.serif],
            lexend: ['var(--font-lexend)', ...fontFamily.sans]
  		},
  		colors: {
  			dark: {
  				'50': '#F5F5F5',
  				'100': '#E0E0E0',
  				'200': '#BBBBBB',
  				'300': '#828282',
  				'400': '#444444',
  				'500': '#323232',
  				'600': '#2A2A2A',
  				'700': '#222222',
  				'800': '#181818',
  				'900': '#121212'
  			},
  			accent: {
  				'50': '#FFF8E0',
  				'100': '#FFEA00',
  				'200': '#FFD500',
  				'300': '#FFBD00',
  				'400': '#FFA500',
  				'500': '#FF8E00',
  				'600': '#FF7A00',
  				'700': '#FF5D00',
  				'800': '#FF4800',
  				'900': '#FF3900',
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			primary: {
  				'50': '#f0f7ff',
  				'100': '#dbeafe',
  				'200': '#bfdbfe',
  				'300': '#93c5fd',
  				'400': '#60a5fa',
  				'500': '#3b82f6',
  				'600': '#2563eb',
  				'700': '#1d4ed8',
  				'800': '#1e40af',
  				'900': '#1e3a8a',
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				'50': '#f8fafc',
  				'100': '#f1f5f9',
  				'200': '#e2e8f0',
  				'300': '#cbd5e1',
  				'400': '#94a3b8',
  				'500': '#64748b',
  				'600': '#475569',
  				'700': '#334155',
  				'800': '#1e293b',
  				'900': '#0f172a',
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			xl: '1rem',
  			'2xl': '1.5rem',
  			'3xl': '2rem',
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		boxShadow: {
  			card: '0 4px 20px rgba(0, 0, 0, 0.25)',
  			pill: '0 4px 10px rgba(0, 0, 0, 0.15)'
  		},
  		keyframes: {
  			wave: {
  				'0%, 100%': { transform: 'translateY(0)' },
  				'50%': { transform: 'translateY(-3px)' }
  			},
  			frequency: {
  				'0%, 100%': { height: '3px' },
  				'50%': { height: '12px' }
  			}
  		},
  		animation: {
  			wave: 'wave 1s ease-in-out infinite',
  			frequency: 'frequency 0.5s ease-in-out infinite'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 3.9%; /* Default dark background for fallback */
    --foreground: 0 0% 98%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --mouse-x: 0px;
    --mouse-y: 0px;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply text-foreground; /* Keep text color, remove explicit bg-background */
    /* The .mouse-gradient-bg div will now handle the visual background */
  }
  .mouse-gradient-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: hsl(var(--background)); /* Fallback solid dark background */
    background-image: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      rgba(255, 165, 0, 0.06),  /* Subtle orange gradient */
      transparent 80%
    );
    background-repeat: no-repeat;
    z-index: -1; /* Ensure it's behind all content */
  }
}

@layer components {
  /* Clean section separators */
  .section-separator {
    border-top: 1px solid rgba(255, 255, 255, 0.06);
  }

  /* Frosted Glass with Noise elevation system */
  .card-elevated { /* Used by FAQ cards */
    background-color: rgba(15, 15, 15, 0.4); /* Adjusted opacity back down */
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 250 250' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.75' numOctaves='2' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.04'/%3E%3C/svg%3E");
    backdrop-filter: blur(20px); /* Readjusted blur */
    border: 1px solid rgba(255, 255, 255, 0.06);
    box-shadow: 
      0 5px 15px rgba(0, 0, 0, 0.3),
      0 18px 45px rgba(0, 0, 0, 0.2);
  }
  
  .card-floating { /* Used by Pricing card and Terminal demo */
    background-color: rgba(15, 15, 15, 0.4); /* Adjusted opacity back down */
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 250 250' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.75' numOctaves='2' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.04'/%3E%3C/svg%3E");
    backdrop-filter: blur(24px); /* Readjusted blur */
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 
      0 8px 22px rgba(0, 0, 0, 0.35),
      0 25px 60px rgba(0, 0, 0, 0.25);
  }

  .terminal-screen-frosted { /* For the inner screen of the terminal demo */
    background-color: rgba(15, 15, 15, 0.4); /* Dark, semi-transparent base */
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 250 250' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.75' numOctaves='2' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.03'/%3E%3C/svg%3E"); /* Standard noise */
    backdrop-filter: blur(16px); /* Slightly less blur for an inner surface */
  }

  /* Enhanced pill component */
  .pill-container {
    position: relative;
    background: rgba(18, 18, 18, 0.95);
    backdrop-filter: blur(16px);
    border-radius: 14px;
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    cursor: pointer;
    border: 1px solid rgba(255, 95, 31, 0.2);
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.15),
      0 4px 16px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.05);
  }

  .pill-container.collapsed {
    width: 45px;
    height: 16px;
  }

  .pill-container:hover,
  .pill-container.listening, 
  .pill-container.processing {
    width: 70px;
    height: 22px;
    border: 1px solid rgba(255, 95, 31, 0.4);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.2),
      0 8px 24px rgba(0, 0, 0, 0.15),
      0 0 0 1px rgba(255, 95, 31, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    transform: translateY(-1px);
  }

  .pill-content {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #FF5F1F;
  }

  .visualization-container {
    width: 75%;
    height: 12px;
    display: flex;
    justify-content: center;
    gap: 4px;
    align-items: center;
  }

  .dot {
    width: 3px;
    height: 3px;
    border-radius: 50%;
    background: linear-gradient(to top, #FF5F1F, #FFA07A);
    opacity: 1;
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    box-shadow: 0 0 4px rgba(255, 95, 31, 0.3);
  }

  .dot.animated {
    animation: wave 1.5s infinite ease-in-out;
  }

  .dot.animated:nth-child(2n) { animation-delay: 0.15s; }
  .dot.animated:nth-child(3n) { animation-delay: 0.3s; }
  .dot.animated:nth-child(4n) { animation-delay: 0.45s; }
  .dot.animated:nth-child(5n) { animation-delay: 0.6s; }

  .waveform-bar {
    width: 3px;
    border-radius: 1px;
    animation: pulse 1.5s infinite;
    background: linear-gradient(to top, #FF5F1F, #FFA07A);
    opacity: 1;
    box-shadow: 0 0 4px rgba(255, 95, 31, 0.3);
  }

  .dot.collapsed {
    width: 2px;
    height: 2px;
    opacity: 0.95;
    background: linear-gradient(to top, #FF5F1F, #FFA07A);
    box-shadow: 0 0 2px rgba(255, 95, 31, 0.2);
  }

  .pill-container.collapsed .visualization-container {
    gap: 3px;
  }

  @keyframes wave {
    0%, 100% { transform: translateY(0); opacity: 1; }
    50% { transform: translateY(-4px); opacity: 0.8; }
  }

  @keyframes pulse {
    0%, 100% { height: 3px; opacity: 1; }
    50% { height: 8px; opacity: 0.9; }
  }

  /* Typography enhancements */
  .heading-gradient {
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.95) 0%,
      rgba(255, 255, 255, 0.7) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .text-subtle {
    color: rgba(255, 255, 255, 0.6);
  }

  .text-dimmed {
    color: rgba(255, 255, 255, 0.4);
  }

  /* Button enhancements */
  .btn-primary {
    background: rgba(255, 255, 255, 0.95);
    color: rgba(0, 0, 0, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.12),
      0 4px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  .btn-primary:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-1px);
    box-shadow: 
      0 2px 6px rgba(0, 0, 0, 0.15),
      0 8px 20px rgba(0, 0, 0, 0.1);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.05);
    color: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(8px);
    transition: all 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }
}
</file>

<file path="src/app/layout.tsx">
import "@/styles/globals.css";

import { DM_Serif_Display, Lexend_Deca } from "next/font/google";
import { type Metadata } from "next";
import MouseAwareGradient from "@/components/layout/MouseAwareGradient";

const dmSerif = DM_Serif_Display({
  subsets: ["latin"],
  weight: "400",
  variable: "--font-dm-serif",
});

const lexendDeca = Lexend_Deca({
  subsets: ["latin"],
  variable: "--font-lexend",
});

export const metadata: Metadata = {
  title: "Sonic Flow - AI-Powered Dictation Tool",
  description: "Sonic Flow is an AI-powered dictation tool that seamlessly transcribes your speech into any text field. Save time, boost productivity, and say goodbye to manual typing.",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${dmSerif.variable} ${lexendDeca.variable} dark`}>
      <body className="font-sans relative">
        <MouseAwareGradient />
        <div className="mouse-gradient-bg"></div>
        <div className="relative z-10">
          {children}
        </div>
      </body>
    </html>
  );
}
</file>

<file path="package.json">
{
  "name": "sonic-flow-site",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.5.0",
    "lucide-react": "^0.482.0",
    "next": "^15.0.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.5.0",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/eslint": "^8.56.10",
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^8.1.0",
    "@typescript-eslint/parser": "^8.1.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "^15.0.1",
    "postcss": "^8.4.39",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.5.3"
  },
  "ct3aMetadata": {
    "initVersion": "7.38.1"
  },
  "packageManager": "npm@10.9.2"
}
</file>

<file path="src/app/page.tsx">
import {
  Hero,
  HowItWorks,
  Pricing,
  FAQ,
  Header,
  Footer,
  Features
} from "@/components";

export default function Home() {
  return (
    <main className="min-h-screen">
      <Header />
      <Hero />
      <Features />
      <HowItWorks />
      <Pricing />
      <FAQ />
      <Footer />
    </main>
  );
}
</file>

</files>
